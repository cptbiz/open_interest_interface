const OpenAI = require('openai');

class OpenAIAnalyzer {
    constructor() {
        this.isAvailable = !!process.env.OPENAI_API_KEY;
        if (this.isAvailable) {
            this.openai = new OpenAI({
                apiKey: process.env.OPENAI_API_KEY
            });
        } else {
            console.log('‚ö†Ô∏è OpenAI API key not configured. AI features will be disabled.');
        }
    }

    async analyzeOpenInterest(data) {
        if (!this.isAvailable) {
            return {
                analysis: "OpenAI API key not configured. Please set OPENAI_API_KEY environment variable to enable AI analysis.",
                sentiment: "neutral",
                recommendations: [
                    "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ OpenAI API –∫–ª—é—á –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è AI –∞–Ω–∞–ª–∏–∑–∞",
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /api/analysis –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞",
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /api/sentiment –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π"
                ],
                timestamp: new Date().toISOString()
            };
        }

        try {
            const prompt = this.createAnalysisPrompt(data);
            
            const completion = await this.openai.chat.completions.create({
                model: "gpt-4o-mini",
                messages: [
                    {
                        role: "system",
                        content: "You are a cryptocurrency market analyst specializing in Open Interest analysis. Provide concise, actionable insights in Russian."
                    },
                    {
                        role: "user",
                        content: prompt
                    }
                ],
                max_tokens: 500,
                temperature: 0.7
            });

            const analysis = completion.choices[0].message.content;
            
            return {
                analysis,
                sentiment: this.extractSentiment(analysis),
                recommendations: this.extractRecommendations(analysis),
                timestamp: new Date().toISOString()
            };

        } catch (error) {
            console.error('‚ùå OpenAI API error:', error.message);
            return {
                analysis: "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ OpenAI API: " + error.message,
                sentiment: "neutral",
                recommendations: [
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å OpenAI API –∫–ª—é—á–∞",
                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ",
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
                ],
                error: error.message,
                timestamp: new Date().toISOString()
            };
        }
    }

    createAnalysisPrompt(data) {
        const { openInterest, fundingRates, longShortRatio } = data;
        
        let prompt = "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:\n\n";
        
        if (openInterest && openInterest.length > 0) {
            prompt += "üìä Open Interest –¥–∞–Ω–Ω—ã–µ:\n";
            openInterest.forEach(item => {
                prompt += `- ${item.exchange} ${item.symbol}: ${item.openInterestValue.toLocaleString()} USDT\n`;
            });
        }
        
        if (fundingRates && fundingRates.length > 0) {
            prompt += "\nüí∞ Funding Rates:\n";
            fundingRates.forEach(item => {
                const rate = (item.fundingRate * 100).toFixed(4);
                prompt += `- ${item.exchange} ${item.symbol}: ${rate}%\n`;
            });
        }
        
        if (longShortRatio && longShortRatio.length > 0) {
            prompt += "\n‚öñÔ∏è Long/Short Ratio:\n";
            longShortRatio.forEach(item => {
                prompt += `- ${item.exchange} ${item.symbol}: ${item.longShortRatio.toFixed(2)}\n`;
            });
        }
        
        prompt += "\n–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑:\n";
        prompt += "1. –û–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞\n";
        prompt += "2. –ö–ª—é—á–µ–≤—ã–µ —Ç—Ä–µ–Ω–¥—ã\n";
        prompt += "3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–æ–≤\n";
        prompt += "4. –†–∏—Å–∫–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏\n";
        
        return prompt;
    }

    extractSentiment(analysis) {
        const lowerAnalysis = analysis.toLowerCase();
        if (lowerAnalysis.includes('–±—ã—á–∏–π') || lowerAnalysis.includes('bullish') || lowerAnalysis.includes('—Ä–æ—Å—Ç')) {
            return 'bullish';
        } else if (lowerAnalysis.includes('–º–µ–¥–≤–µ–∂–∏–π') || lowerAnalysis.includes('bearish') || lowerAnalysis.includes('–ø–∞–¥–µ–Ω–∏–µ')) {
            return 'bearish';
        }
        return 'neutral';
    }

    extractRecommendations(analysis) {
        const recommendations = [];
        const lines = analysis.split('\n');
        
        for (const line of lines) {
            if (line.includes('—Ä–µ–∫–æ–º–µ–Ω–¥') || line.includes('—Å–æ–≤–µ—Ç') || line.includes('–¥–µ–π—Å—Ç–≤–∏–µ')) {
                recommendations.push(line.trim());
            }
        }
        
        return recommendations.slice(0, 3); // –ú–∞–∫—Å–∏–º—É–º 3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    }

    async generateMarketReport(data) {
        if (!this.isAvailable) {
            return {
                report: "OpenAI API key not configured. Please set OPENAI_API_KEY environment variable to enable AI reports.",
                summary: "No AI analysis available",
                timestamp: new Date().toISOString()
            };
        }

        try {
            const prompt = `–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –æ —Ä—ã–Ω–∫–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö:
            
            Open Interest: ${data.openInterest?.length || 0} –∑–∞–ø–∏—Å–µ–π
            Funding Rates: ${data.fundingRates?.length || 0} –∑–∞–ø–∏—Å–µ–π
            Long/Short Ratio: ${data.longShortRatio?.length || 0} –∑–∞–ø–∏—Å–µ–π
            
            –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å:
            1. –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ
            2. –û—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã
            3. –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è
            4. –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ (1-10)`;

            const completion = await this.openai.chat.completions.create({
                model: "gpt-4o-mini",
                messages: [
                    {
                        role: "system",
                        content: "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–º —Ä—ã–Ω–∫–∞–º. –ü–∏—à–∏ –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
                    },
                    {
                        role: "user",
                        content: prompt
                    }
                ],
                max_tokens: 300,
                temperature: 0.5
            });

            return {
                report: completion.choices[0].message.content,
                timestamp: new Date().toISOString()
            };

        } catch (error) {
            console.error('‚ùå OpenAI report error:', error.message);
            return {
                report: "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: " + error.message,
                summary: "AI report generation failed",
                error: error.message,
                timestamp: new Date().toISOString()
            };
        }
    }
}

module.exports = OpenAIAnalyzer; 